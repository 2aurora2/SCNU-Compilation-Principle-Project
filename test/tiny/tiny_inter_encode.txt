comparison-op → <
1 1
comparison-op → >
1 1
comparison-op → =
1 1
comparison-op → <=
1 1
comparison-op → <>
1 1
comparison-op → >=
1 1
mulop → *
1 1
mulop → /
1 1
mulop → %
1 1
mulop → ^
1 1
factor → ( exp )
1 0 1 0
factor → number
1 1
factor → identifier
1 1
program → stmt-sequence
0
addop → +
1 1
addop → -
1 1
simple-exp → simple-exp addop term
2 1 3 2
simple-exp → term
0
exp → simple-exp comparison-op simple-exp
2 1 3 2
exp → simple-exp
0
stmt-sequence → statement
0
statement → if-stmt
0
statement → repeat-stmt
0
statement → assign-stmt
0
statement → read-stmt
0
statement → write-stmt
0
term → term mulop factor
2 1 3 2
term → factor
0
read-stmt → read identifier
3
write-stmt → write exp
4 
assign-stmt → identifier := exp
5 
if-stmt → if exp then stmt-sequence end
6
if-stmt → if exp then stmt-sequence else stmt-sequence end
7
stmt-sequence → stmt-sequence ; statement
8
repeat-stmt → repeat stmt-sequence until exp
9
